(macroexpand-1 '(ENSURE-STRUCT (QUOTE RESTART) (QUOTE ((:CONSTRUCTOR MAKE-RESTART (NAME FUNCTION &KEY INTERACTIVE-FUNCTION REPORT-FUNCTION TEST-FUNCTION)) (:PREDICATE RESTARTP))) nil (QUOTE ((NAME) (FUNCTION) (INTERACTIVE-FUNCTION) (REPORT-FUNCTION) (TEST-FUNCTION)))))


(ENSURE-STRUCT-alt-3
 (QUOTE RESTART)
 (QUOTE ((:CONSTRUCTOR MAKE-RESTART
		       (NAME FUNCTION
			     &KEY INTERACTIVE-FUNCTION
			     REPORT-FUNCTION TEST-FUNCTION))
	 (:PREDICATE RESTARTP)))
 nil
 (QUOTE ((NAME) (FUNCTION) (INTERACTIVE-FUNCTION) (REPORT-FUNCTION) (TEST-FUNCTION))))



(defun ensure-struct-alt-3 (name options documentation slots)
  (flet ((option (option-name default)
	   (let ((pair (assoc option-name options)))
	     (if pair (cdr pair) default)))
	 (make-getter (i)
	   #'(lambda (x) (iref x i)))
	 (make-setter (i)
	   #'(lambda (v x) (setf (iref x i) v))))
    (makei 1 *structure-class* (makei 7 3))))

;; no crash
(defun ensure-struct-alt-2 (name options documentation slots)
  (flet ((option (option-name default)
	   (let ((pair (assoc option-name options)))
	     (if pair (cdr pair) default)))
	 (make-getter (i)
	   #'(lambda (x) (iref x i)))
	 (make-setter (i)
	   #'(lambda (v x) (setf (iref x i) v))))
))

(defun ensure-struct-alt-1 (name options documentation slots)
  (flet ((option (option-name default)
	   (let ((pair (assoc option-name options)))
	     (if pair (cdr pair) default)))
	 (make-getter (i)
	   #'(lambda (x) (iref x i)))
	 (make-setter (i)
	   #'(lambda (v x) (setf (iref x i) v))))
    (let* ((struct-class (makei 1 *structure-class* (makei 7 3)))
	   (conc-name (option :conc-name (conc-string name "-")))
	   (constructor (option :constructor nil))
	   (predicate (option :predicate t))
	   (include (option :include nil))
	   (super (if (car include)
		      (find-class (car include))
		      *structure-object*))
	   (effective-slots
	    (append (unless (eq super *structure-object*)
		      (mapcar #'(lambda (slot)
				  (let ((m (member (car slot) (cdr include)
						   :key #'car)))
				    (if m (car m) slot)))
			      (iref (iref super 2) 6)))
		    slots))))))

(defun ensure-struct (name options documentation slots)
  (flet ((option (option-name default)
	   (let ((pair (assoc option-name options)))
	     (if pair (cdr pair) default)))
	 (make-getter (i)
	   #'(lambda (x) (iref x i)))
	 (make-setter (i)
	   #'(lambda (v x) (setf (iref x i) v))))
    (let* ((struct-class (makei 1 *structure-class* (makei 7 3)))
	   (conc-name (option :conc-name (conc-string name "-")))
	   (constructor (option :constructor nil))
	   (predicate (option :predicate t))
	   (include (option :include nil))
	   (super (if (car include)
		      (find-class (car include))
		      *structure-object*))
	   (effective-slots
	    (append (unless (eq super *structure-object*)
		      (mapcar #'(lambda (slot)
				  (let ((m (member (car slot) (cdr include)
						   :key #'car)))
				    (if m (car m) slot)))
			      (iref (iref super 2) 6)))
		    slots)))
      (when (eq predicate t)
	(setq predicate (list (intern (conc-string name "-P")))))
      (when predicate
	(setf (fdefinition (car predicate))
	      #'(lambda (object) (and (= (ldb '(2 . 0) (ival object)) 2)
				      (eq struct-class (iref object 1))))))
      (unless constructor
	(setq constructor (list (intern (conc-string "MAKE-" name)))))
      (dolist (slot-description (cdr include))
	(let ((slot (assoc (car slot-description) effective-slots)))
	  (setf (cdr slot) (cdr slot-description))))
      (setf (iref (iref struct-class 2) 2) name)
      (setf (iref (iref struct-class 2) 3) (list super))
      (setf (iref (iref struct-class 2) 4) (length effective-slots))
      (setf (iref (iref struct-class 2) 5)
	    (cons struct-class (iref (iref super 2) 5)))
      (setf (iref (iref struct-class 2) 6) effective-slots)
      (when (car constructor)
	(setf (fdefinition (car constructor))
	      (make-boa-constructor (length effective-slots)
				    struct-class effective-slots
				    (cadr constructor))))
      (let ((i 2))
	(dolist (slot effective-slots)
	  (let ((accessor (intern (conc-string conc-name (car slot)))))
	    (setf (fdefinition accessor) (make-getter i))
	    (setf (fdefinition `(setf ,accessor)) (make-setter i))
	    (setf i (+ 1 i)))))
      (setf (find-class name) struct-class)))
  name)
